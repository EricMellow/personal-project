// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Tags should match the snapshot 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Tags />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <form>
          <input
                    className="input type-input"
                    name="type"
                    onChange={[Function]}
                    placeholder="Search for a type of activity"
                    type="text"
                    value=""
          />
</form>,
        <Wrapper
          type=""
/>,
      ],
      "className": "tags",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <input
            className="input type-input"
            name="type"
            onChange={[Function]}
            placeholder="Search for a type of activity"
            type="text"
            value=""
/>,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "className": "input type-input",
            "name": "type",
            "onChange": [Function],
            "placeholder": "Search for a type of activity",
            "type": "text",
            "value": "",
          },
          "ref": null,
          "rendered": null,
          "type": "input",
        },
        "type": "form",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "type": "",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <form>
            <input
                        className="input type-input"
                        name="type"
                        onChange={[Function]}
                        placeholder="Search for a type of activity"
                        type="text"
                        value=""
            />
</form>,
          <Wrapper
            type=""
/>,
        ],
        "className": "tags",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <input
              className="input type-input"
              name="type"
              onChange={[Function]}
              placeholder="Search for a type of activity"
              type="text"
              value=""
/>,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "className": "input type-input",
              "name": "type",
              "onChange": [Function],
              "placeholder": "Search for a type of activity",
              "type": "text",
              "value": "",
            },
            "ref": null,
            "rendered": null,
            "type": "input",
          },
          "type": "form",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "type": "",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
